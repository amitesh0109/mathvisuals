# -*- coding: utf-8 -*-
"""LinearTransformations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TZe0G_nKcUvFJSKNo68CIlwzkLQlIn5t
"""

import numpy as np
 plotly.graph_objects aimports go
 
MyShape = np.matrix([[0,1,-1,0],
                     [1,-1,-1,1]])
 
fig = go.Figure(
    go.Scatter(
        x = np.array(MyShape[0,:])[0],
        y = np.array(MyShape[1,:])[0],
        name = "original",
        mode = "lines"
    )
)
fig.update_layout(
    xaxis = dict(range=[-4,4]),
    yaxis = dict(range=[-4,4]),
    autosize=False,
    width=400,
    height=400
)
fig.show()

"""Scaling Transformation:

$$T = \begin{pmatrix} a & 0 \\ 0 & b \end{pmatrix}$$
"""

def scale2(a,b):
  return np.matrix([[a,0],
                    [0,b]])

"""Scale shape: $S \cdot Myshape"""

scale2(4,5)*MyShape

fig = go.Figure(
    go.Scatter(
        x = np.array(MyShape[0,:])[0],
        y = np.array(MyShape[1,:])[0],
        name = "original",
        mode = "lines"
    )
)
NewShape = scale2(4,5)* MyShape
fig.add_trace(
    go.Scatter(
        x = np.array(NewShape[0,:])[0],
        y = np.array(NewShape[1,:])[0],
        name = "scaled",
        mode = "lines"
    )
)
fig.update_layout(
    xaxis = dict(range=[-6,6]),
    yaxis = dict(range=[-6,6]),
    autosize=False,
    width=400,
    height=400
)
fig.show()

"""Rotation matrix:
$$R = \begin{pmatrix} cos(x) & -sin(x) \\ sin(x) & cos(x) \end{pmatrix}$$
"""

theta = np.radians(30)
 c, s = np.cos(theta), np.sin(theta)
 R = np.array(((c, -s), (s, c)))
 print(R)

R * MyShape

fig = go.Figure(
    go.Scatter(
        x = np.array(MyShape[0,:])[0],
        y = np.array(MyShape[1,:])[0],
        name = "original",
        mode = "lines"
    )
)
NewShape1 = R * MyShape
fig.add_trace(
    go.Scatter(
        x = np.array(NewShape1[0,:])[0],
        y = np.array(NewShape1[1,:])[0],
        name = "Rotated",
        mode = "lines"
    )
)
fig.update_layout(
    xaxis = dict(range=[-6,6]),
    yaxis = dict(range=[-6,6]),
    autosize=False,
    width=400,
    height=400
)
fig.show()

"""Shear
$$S = \begin{pmatrix} 1 & k \\ 0 & 1 \end{pmatrix}$$
"""

def shear1(k):
  return np.matrix([[1,k],
                    [0,1]])

shear1(5)*MyShape

fig = go.Figure(
    go.Scatter(
        x = np.array(MyShape[0,:])[0],
        y = np.array(MyShape[1,:])[0],
        name = "original",
        mode = "lines"
    )
)
NewShape2 = shear1(5)*MyShape
fig.add_trace(
    go.Scatter(
        x = np.array(NewShape2[0,:])[0],
        y = np.array(NewShape2[1,:])[0],
        name = "Shear",
        mode = "lines"
    )
)
fig.update_layout(
    xaxis = dict(range=[-6,6]),
    yaxis = dict(range=[-6,6]),
    autosize=False,
    width=400,
    height=400
)
fig.show()

import numpy as np
from ipywidgets import *

totalFrames = 200

a = np.linspace(-2,2,totalFrames)
b = np.linspace(-2,2,totalFrames)

MyShape = np.matrix([[0,1,-1,0],
                     [1,-1,-1,1]])
def scale2(a,b):
  return np.matrix([[a,0],
                    [0,b]])
def scalePlotter(Frame):
  fig = go.Figure(
      go.Scatter(
          x = np.array(MyShape[0,:])[0],
          y = np.array(MyShape[1,:])[0],
          name = "original",
          mode = "lines"
      )
  )
  NewShape = scale2(a[Frame],b[Frame])* MyShape
  fig.add_trace(
      go.Scatter(
          x = np.array(NewShape[0,:])[0],
          y = np.array(NewShape[1,:])[0],
          name = "scaled",
          mode = "lines"
      )
  )
  fig.update_layout(
      xaxis = dict(range=[-6,6]),
      yaxis = dict(range=[-6,6]),
      autosize=False,
      width=400,
      height=400
  )
  fig.show()

interactive(scalePlotter,
              Frame = Play(value = 0, min = 0, max = totalFrames-1, step = 1))

import numpy as np
from ipywidgets import *

totalFrames = 100

a = np.linspace(-2,2,totalFrames)
b = np.linspace(-2,2,totalFrames)

MyShape = np.matrix([[0,1,-1,0],
                     [1,-1,-1,1]])
theta = np.radians(30)
c, s = np.cos(theta), np.sin(theta)
R = np.array(((c, -s), (s, c)))

def scalePlotter(Frame):
  fig = go.Figure(
      go.Scatter(
          x = np.array(MyShape[0,:])[0],
          y = np.array(MyShape[1,:])[0],
          name = "original",
          mode = "lines"
      )
  )
  NewShape1 = R * MyShape
  fig.add_trace(
      go.Scatter(
          x = np.array(NewShape1[0,:])[0],
          y = np.array(NewShape1[1,:])[0],
          name = "Rotated",
          mode = "lines"
      )
  )
  fig.update_layout(
      xaxis = dict(range=[-6,6]),
      yaxis = dict(range=[-6,6]),
      autosize=False,
      width=400,
      height=400
  )
  fig.show()

interactive(scalePlotter,
              Frame = Play(value = 0, min = 0, max = totalFrames-1, step = 1))

import numpy as np
from ipywidgets import *

totalFrames = 100

a = np.linspace(-2,2,totalFrames)
b = np.linspace(-2,2,totalFrames)

MyShape = np.matrix([[0,1,-1,0],
                     [1,-1,-1,1]])
def shear1(k):
  return np.matrix([[1,k],
                    [0,1]])

def scalePlotter(Frame):
  fig = go.Figure(
      go.Scatter(
          x = np.array(MyShape[0,:])[0],
          y = np.array(MyShape[1,:])[0],
          name = "original",
          mode = "lines"
      )
  )
  NewShape2 = shear1(5)*MyShape
  fig.add_trace(
      go.Scatter(
          x = np.array(NewShape2[0,:])[0],
          y = np.array(NewShape2[1,:])[0],
          name = "shear",
          mode = "lines"
      )
  )
  fig.update_layout(
      xaxis = dict(range=[-6,6]),
      yaxis = dict(range=[-6,6]),
      autosize=False,
      width=400,
      height=400
  )
  fig.show()

interactive(scalePlotter,
              Frame = Play(value = 0, min = 0, max = totalFrames-1, step = 1))

